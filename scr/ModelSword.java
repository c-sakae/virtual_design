import java.awt.*;
import java.io.IOException;

public class ModelSword extends MyWire {
    private double ang = 0.0;

    public void run(){
        this.ang++; //double型でも使える？

        double rad = this.ang * Math.PI / 180.0;

        double z = 15.0 + 5.0 * Math.cos(3.0*rad);
        double x = 1.5 + 5.0 * Math.sin(5.0*rad);
        double y = 3.0;
        this.setPos(x, y, z);

        this.rotX(1.0);
    }
    public ModelSword(){
        super();
        this.setColor(Color.red);

        try{
            this.loadOBJ("obj/sword.obj");
        }
        catch(IOException e){
            System.out.println("objファイルの読み込みに失敗しました。");
        }
        /*
        //頂点情報 *"this."を省略
        addVPos(-0.959122,0.413201,-0.413201);
        addVPos(-0.959122,0.413201,0.413201);
        addVPos(-0.423302,0.566556,0.048314);
        addVPos(-0.423302,0.566556,-0.048314);
        addVPos(0.959122,-0.413201,0.413201);
        addVPos(0.959122,0.413201,0.413201);
        addVPos(-0.959122,-0.413201,0.413201);
        addVPos(-0.959122,-0.413201,-0.413201);
        addVPos(0.959122,-0.413201,-0.413201);
        addVPos(0.529534,-0.633486,-0.22813);
        addVPos(-0.529534,-0.633486,-0.22813);
        addVPos(0.959122,0.413201,-0.413201);
        addVPos(-0.423302,5.769372,0.048314);
        addVPos(-0.423302,5.769372,-0.048314);
        addVPos(0.423302,0.566556,-0.048314);
        addVPos(0.423302,0.566556,0.048314);
        addVPos(0.423302,5.769372,0.048314);
        addVPos(0.047456,6.368237,0.005416);
        addVPos(-0.047456,6.368237,0.005416);
        addVPos(0.423302,5.769372,-0.048314);
        addVPos(0.047456,6.368237,-0.005416);
        addVPos(-0.047456,6.368237,-0.005416);
        addVPos(0.529534,-0.633486,0.22813);
        addVPos(-0.529534,-0.633486,0.22813);
        addVPos(-0.529534,-1.145642,0.22813);
        addVPos(0.529534,-1.145642,0.22813);
        addVPos(0.529534,-1.145642,-0.22813);
        addVPos(0.383062,-1.593723,0.165028);
        addVPos(0.383062,-1.593723,-0.165028);
        addVPos(-0.529534,-1.145642,-0.22813);
        addVPos(-0.383062,-1.593723,-0.165028);
        addVPos(0.383062,-3.115801,-0.165028);
        addVPos(-0.383062,-3.115801,-0.165028);
        addVPos(-0.383062,-1.593723,0.165028);
        addVPos(0.383062,-3.115801,0.165028);
        addVPos(-0.383062,-3.115801,0.165028);
        addVPos(-0.483098,-3.27054,0.208125);
        addVPos(0.483098,-3.27054,0.208125);
        addVPos(0.483098,-3.27054,-0.208125);
        addVPos(0.483098,-3.520019,0.208125);
        addVPos(0.483098,-3.520019,-0.208125);
        addVPos(-0.483098,-3.27054,-0.208125);
        addVPos(-0.483098,-3.520019,0.208125);
        addVPos(-0.173457,-3.724461,0.074728);
        addVPos(0.173457,-3.724461,0.074728);
        addVPos(-0.483098,-3.520019,-0.208125);
        addVPos(-0.173457,-3.724461,-0.074728);
        addVPos(0.173457,-3.724461,-0.074728);

        //面情報
        int[][] face = {
            {1,2,3},
            {1,3,4},
            {5,6,2},
            {5,2,7},
            {7,2,1},
            {7,1,8},
            {8,9,10},
            {8,10,11},
            {9,12,6},
            {9,6,5},
            {8,1,12},
            {8,12,9},
            {4,3,13},
            {4,13,14},
            {6,12,15},
            {6,15,16},
            {12,1,4},
            {12,4,15},
            {2,6,16},
            {2,16,3},
            {13,17,18},
            {13,18,19},
            {3,16,17},
            {3,17,13},
            {15,4,14},
            {15,14,20},
            {16,15,20},
            {16,20,17},
            {21,22,19},
            {21,19,18},
            {20,14,22},
            {20,22,21},
            {17,20,21},
            {17,21,18},
            {14,13,19},
            {14,19,22},
            {23,24,25},
            {23,25,26},
            {5,7,24},
            {5,24,23},
            {7,8,11},
            {7,11,24},
            {9,5,23},
            {9,23,10},
            {27,26,28},
            {27,28,29},
            {24,11,30},
            {24,30,25},
            {10,23,26},
            {10,26,27},
            {11,10,27},
            {11,27,30},
            {31,29,32},
            {31,32,33},
            {30,27,29},
            {30,29,31},
            {26,25,34},
            {26,34,28},
            {25,30,31},
            {25,31,34},
            {35,36,37},
            {35,37,38},
            {28,34,36},
            {28,36,35},
            {34,31,33},
            {34,33,36},
            {29,28,35},
            {29,35,32},
            {39,38,40},
            {39,40,41},
            {36,33,42},
            {36,42,37},
            {32,35,38},
            {32,38,39},
            {33,32,39},
            {33,39,42},
            {40,43,44},
            {40,44,45},
            {42,39,41},
            {42,41,46},
            {38,37,43},
            {38,43,40},
            {37,42,46},
            {37,46,43},
            {47,48,45},
            {47,45,44},
            {43,46,47},
            {43,47,44},
            {41,40,45},
            {41,45,48},
            {46,41,48},
            {46,48,47}
        };

        //面の数だけループ
        for (int i=0; i<face.length; i++){
            //面の中の頂点数だけループ
            for (int j=0; j<face[i].length; j++){
                //jに相当する頂点と１つ次の頂点
                int st = j;
                int ed = (j+1) % face[i].length;
                //配列番号をもとに頂点番号を取得
                //頂点番号のデータは1スタートであることに注意
                int eST = face[i][st] - 1;
                int eED = face[i][ed] - 1;
                //辺としてセット
                this.addEdge(eST, eED);
            }
        }
        */
    }
}